import os
import psycopg2
import random
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
)

TOKEN = "7846671959:AAE9QJ3nFNWNrGXZInp6utnCugaYU1QhJpI"
ADMIN_USERNAME = "m0onstoun"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL",
                         "postgresql://postgres:NeHOTwRTxSabYitdgNedblEXNsYvGLBi@postgres.railway.internal:5432/railway")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
conn = psycopg2.connect(DATABASE_URL, sslmode="require")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY SERIAL,
    username TEXT UNIQUE,
    question TEXT,
    answer TEXT,
    message TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS greetings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    text TEXT UNIQUE
)
""")

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ—Ç)
cursor.execute("INSERT OR IGNORE INTO greetings (text) VALUES ('–° –¥–Ω–µ–º –ª—é–±–≤–∏!')")
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏
USERNAME, QUESTION, ANSWER, MESSAGE = range(4)


# === –§—É–Ω–∫—Ü–∏–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    username = update.message.from_user.username
    cursor.execute("SELECT question FROM users WHERE username=?", (username,))
    user = cursor.fetchone()

    if user:
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {username}! –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n {user[0]}")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ
    cursor.execute("SELECT text FROM greetings")
    greetings = cursor.fetchall()

    if greetings:
        greeting = random.choice(greetings)[0]
        await update.message.reply_text(greeting)
    else:
        await update.message.reply_text("–° –¥–Ω–µ–º –ª—é–±–≤–∏!")


async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.from_user.username
    answer = update.message.text.strip()

    cursor.execute("SELECT answer, message FROM users WHERE username=?", (username,))
    user = cursor.fetchone()

    if user and user[0].lower() == answer.lower():
        await update.message.reply_text(f"–õ–∏—á–Ω–æ –≤ —á–∞—Ç–∏–∫! –ö–∞–∫ —Å–∫–∞–∑–∞–ª –ì–æ—à–∞:\n\nüíå {user[1]}")
        admin_chat_id = update.message.chat_id  # ID –∞–¥–º–∏–Ω–∞
        await context.bot.send_message(chat_id=admin_chat_id, text=f"üíå @{username} –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) —Å–≤–æ—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É!")
    elif user:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        cursor.execute("SELECT text FROM greetings")
        greetings = cursor.fetchall()
        greeting = random.choice(greetings)[0] if greetings else "–° –¥–Ω–µ–º –ª—é–±–≤–∏!"
        await update.message.reply_text(greeting)


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ ===
async def add_valentine_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏"""
    if update.message.from_user.username != ADMIN_USERNAME:
        return
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    return USERNAME


async def add_valentine_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    context.user_data["username"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å:")
    return QUESTION


async def add_valentine_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    context.user_data["question"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å:")
    return ANSWER


async def add_valentine_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏"""
    context.user_data["answer"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏:")
    return MESSAGE


async def add_valentine_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    context.user_data["message"] = update.message.text.strip()

    username = context.user_data["username"]
    question = context.user_data["question"]
    answer = context.user_data["answer"]
    message = context.user_data["message"]

    cursor.execute("INSERT INTO users (username, question, answer, message) VALUES (%s, %s, %s, %s)",
                   (username, question, answer, message))
    conn.commit()

    await update.message.reply_text(f"‚úÖ –í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –¥–ª—è @{username} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞"""
    await update.message.reply_text("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ ===
async def add_greeting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    if update.message.from_user.username != ADMIN_USERNAME:
        return
    greeting = " ".join(context.args)

    if greeting:
        try:
            cursor.execute("INSERT INTO greetings (text) VALUES (%s)", (greeting,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:\n{greeting}")
        except sqlite3.IntegrityError:
            await update.message.reply_text("‚ö† –¢–∞–∫–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ!")
    else:
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/add_greeting —Ç–µ–∫—Å—Ç")


async def remove_greeting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    if update.message.from_user.username != ADMIN_USERNAME:
        return
    greeting = " ".join(context.args)

    cursor.execute("DELETE FROM greetings WHERE text=?", (greeting,))
    conn.commit()

    if cursor.rowcount:
        await update.message.reply_text(f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:\n{greeting}")
    else:
        await update.message.reply_text("‚ö† –¢–∞–∫–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç –≤ –±–∞–∑–µ!")


async def list_greetings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π"""
    if update.message.from_user.username != ADMIN_USERNAME:
        return

    cursor.execute("SELECT text FROM greetings")
    greetings = cursor.fetchall()

    if greetings:
        text = "\n".join([f"üîπ {g[0]}" for g in greetings])
        await update.message.reply_text(f"üìú –°–ø–∏—Å–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π:\n{text}")
    else:
        await update.message.reply_text("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π.")


# === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
async def remove_valentine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è m0onstoun)"""
    if update.message.from_user.username != ADMIN_USERNAME:
        return
    try:
        username = context.args[0]
        cursor.execute("DELETE FROM users WHERE username=%s", (username,))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –¥–ª—è @{username} —É–¥–∞–ª–µ–Ω–∞!")
    except:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/remove_valentine username")


async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if update.message.from_user.username != ADMIN_USERNAME:
        return
    cursor.execute("SELECT username FROM users")
    users = cursor.fetchall()

    if users:
        user_list = "\n".join([f"üîπ @{u[0]}" for u in users])
        await update.message.reply_text(f"üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


# === –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ===
def main():
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add_valentine", add_valentine_start)],
        states={
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_valentine_username)],
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_valentine_question)],
            ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_valentine_answer)],
            MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_valentine_message)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("add_greeting", add_greeting))
    app.add_handler(CommandHandler("remove_greeting", remove_greeting))
    app.add_handler(CommandHandler("list_greetings", list_greetings))
    app.add_handler(CommandHandler("remove_valentine", remove_valentine))
    app.add_handler(CommandHandler("list_users", list_users))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()